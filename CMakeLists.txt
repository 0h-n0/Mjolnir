cmake_minimum_required(VERSION 2.8)
enable_testing()
project(mjolnir)

include_directories(${PROJECT_SOURCE_DIR})
include_directories(${PROJECT_SOURCE_DIR}/extlib)

option(DEBUG "dump debug information" OFF)
if(DEBUG)
    add_definitions(-DMJOLNIR_DEBUG)
else(DEBUG)
    add_definitions(-DMJOLNIR_NO_DEBUG)
endif(DEBUG)

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    execute_process(COMMAND cat /proc/cpuinfo OUTPUT_FILE "cpuinfo.dat")
    execute_process(COMMAND grep flags "cpuinfo.dat" OUTPUT_FILE "flags.dat")
    execute_process(COMMAND head --lines=1 "flags.dat" OUTPUT_FILE "cpuinfo.dat")
    execute_process(COMMAND rm "flags.dat")
    exec_program(grep ARGS "--count sse2   cpuinfo.dat" OUTPUT_VARIABLE cpu_found_sse2)
    exec_program(grep ARGS "--count sse3   cpuinfo.dat" OUTPUT_VARIABLE cpu_found_sse3)
    exec_program(grep ARGS "--count sse4_1 cpuinfo.dat" OUTPUT_VARIABLE cpu_found_sse4_1)
    exec_program(grep ARGS "--count sse4_2 cpuinfo.dat" OUTPUT_VARIABLE cpu_found_sse4_2)
    exec_program(grep ARGS "--count fma    cpuinfo.dat" OUTPUT_VARIABLE cpu_found_fma)
    exec_program(grep ARGS "--count avx    cpuinfo.dat" OUTPUT_VARIABLE cpu_found_avx)
    exec_program(grep ARGS "--count avx2   cpuinfo.dat" OUTPUT_VARIABLE cpu_found_avx2)
elseif(CMAKE_SYSTEM_NAME strequal "Darwin")
    execute_process(COMMAND "/usr/sbin/sysctl -n machdep.cpu.features" OUTPUT_FILE "cpuinfo.dat")
    exec_program(grep ARGS "--count --quiet SSE2   cpuinfo.dat" RETURN_VALUE cpu_found_sse2)
    exec_program(grep ARGS "--count --quiet SSE3   cpuinfo.dat" RETURN_VALUE cpu_found_sse3)
    exec_program(grep ARGS "--count --quiet SSE4.1 cpuinfo.dat" RETURN_VALUE cpu_found_sse4_1)
    exec_program(grep ARGS "--count --quiet SSE4.2 cpuinfo.dat" RETURN_VALUE cpu_found_sse4_2)
    exec_program(grep ARGS "--count --quiet FMA    cpuinfo.dat" RETURN_VALUE cpu_found_fma)
    exec_program(grep ARGS "--count --quiet AVX    cpuinfo.dat" RETURN_VALUE cpu_found_avx)
    exec_program(grep ARGS "--count --quiet AVX2   cpuinfo.dat" RETURN_VALUE cpu_found_avx2)
endif()

if(cpu_found_mmx GREATER 0)
    message("MMX found")
    add_definitions(-DMJOLNIR_HAVE_MMX)
    add_definitions(-mmmx)
endif()

if(cpu_found_sse GREATER 0)
    message("SSE found")
    add_definitions(-DMJOLNIR_HAVE_SSE)
    add_definitions(-msse)
endif()

if(cpu_found_sse2 GREATER 0)
    message("SSE2 found")
    add_definitions(-DMJOLNIR_HAVE_SSE2)
    add_definitions(-msse2)
endif()

if(cpu_found_sse3 GREATER 0)
    message("SSE3 found")
    add_definitions(-DMJOLNIR_HAVE_SSE3)
    add_definitions(-msse3)
endif()

if(cpu_found_sse4_1 GREATER 0)
    message("SSE4.1 found")
    add_definitions(-DMJOLNIR_HAVE_SSE4_1)
    add_definitions(-msse4.1)
endif()

if(cpu_found_sse4_2 GREATER 0)
    message("SSE4.2 found")
    add_definitions(-DMJOLNIR_HAVE_SSE4_2)
    add_definitions(-msse4.2)
endif()

if(cpu_found_avx GREATER 0)
    message("AVX found")
    add_definitions(-DMJOLNIR_HAVE_AVX)
    add_definitions(-mavx)
endif()

if(cpu_found_avx2 GREATER 0)
    message("AVX2 found")
    add_definitions(-DMJOLNIR_HAVE_AVX2)
    add_definitions(-mavx2)
endif()

if(cpu_found_fma GREATER 0)
    message("FMA found")
    add_definitions(-DMJOLNIR_HAVE_FMA)
    add_definitions(-mfma)
endif()

add_subdirectory(src)
add_subdirectory(test)
